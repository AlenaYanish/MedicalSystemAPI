/*
 * Medical System API
 * API для управління лікарями та записами на прийом у медичній системі.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Appointment from '../model/Appointment';
import Doctor from '../model/Doctor';
import Error from '../model/Error';
import InlineResponse200 from '../model/InlineResponse200';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the appointmentsGet operation.
     * @callback moduleapi/DefaultApi~appointmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Appointment>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отримати список усіх записів на прийом
     * Повертає список усіх записів на прийом у системі з можливістю фільтрації.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.doctorId Фільтрувати за ідентифікатором лікаря
     * @param {Number} opts.patientId Фільтрувати за ідентифікатором пацієнта
     * @param {Date} opts.from Фільтрувати за початковою датою (YYYY-MM-DD)
     * @param {Date} opts.to Фільтрувати за кінцевою датою (YYYY-MM-DD)
     * @param {module:model/String} opts.status Фільтрувати за статусом запису (scheduled, completed, cancelled)
     * @param {module:api/DefaultApi~appointmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'doctor_id': opts['doctorId'],'patient_id': opts['patientId'],'from': opts['from'],'to': opts['to'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Appointment];

      return this.apiClient.callApi(
        '/appointments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsIdDelete operation.
     * @callback moduleapi/DefaultApi~appointmentsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Видалити запис
     * Видаляє запис на прийом за вказаним ідентифікатором.
     * @param {Number} id Ідентифікатор запису
     * @param {module:api/DefaultApi~appointmentsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentsIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/appointments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsIdGet operation.
     * @callback moduleapi/DefaultApi~appointmentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appointment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отримати інформацію про запис за ID
     * Повертає інформацію про запис на прийом за вказаним ідентифікатором.
     * @param {Number} id Ідентифікатор запису
     * @param {module:api/DefaultApi~appointmentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Appointment;

      return this.apiClient.callApi(
        '/appointments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsIdPut operation.
     * @callback moduleapi/DefaultApi~appointmentsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appointment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Оновити інформацію про запис
     * Оновлює інформацію про запис на прийом за вказаним ідентифікатором.
     * @param {module:model/Appointment} body 
     * @param {Number} id Ідентифікатор запису
     * @param {module:api/DefaultApi~appointmentsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsIdPut(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling appointmentsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Appointment;

      return this.apiClient.callApi(
        '/appointments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsPost operation.
     * @callback moduleapi/DefaultApi~appointmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appointment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Створити новий запис на прийом
     * Створює новий запис на прийом.
     * @param {module:model/Appointment} body 
     * @param {module:api/DefaultApi~appointmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling appointmentsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Appointment;

      return this.apiClient.callApi(
        '/appointments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the doctorsGet operation.
     * @callback moduleapi/DefaultApi~doctorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Doctor>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отримати список усіх лікарів
     * Повертає список усіх лікарів у системі.
     * @param {Object} opts Optional parameters
     * @param {String} opts.speciality Фільтрувати за спеціальністю лікаря
     * @param {String} opts.search Пошук за іменем або спеціальністю лікаря
     * @param {module:api/DefaultApi~doctorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    doctorsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'speciality': opts['speciality'],'search': opts['search']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Doctor];

      return this.apiClient.callApi(
        '/doctors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the doctorsIdDelete operation.
     * @callback moduleapi/DefaultApi~doctorsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Видалити лікаря
     * Видаляє лікаря за вказаним ідентифікатором.
     * @param {Number} id Ідентифікатор лікаря
     * @param {module:api/DefaultApi~doctorsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doctorsIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling doctorsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/doctors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the doctorsIdGet operation.
     * @callback moduleapi/DefaultApi~doctorsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Doctor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отримати інформацію про лікаря за ID
     * Повертає інформацію про лікаря за вказаним ідентифікатором.
     * @param {Number} id Ідентифікатор лікаря
     * @param {module:api/DefaultApi~doctorsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    doctorsIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling doctorsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Doctor;

      return this.apiClient.callApi(
        '/doctors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the doctorsIdPut operation.
     * @callback moduleapi/DefaultApi~doctorsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Doctor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Оновити інформацію про лікаря
     * Оновлює інформацію про лікаря за вказаним ідентифікатором.
     * @param {module:model/Doctor} body 
     * @param {Number} id Ідентифікатор лікаря
     * @param {module:api/DefaultApi~doctorsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    doctorsIdPut(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling doctorsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling doctorsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Doctor;

      return this.apiClient.callApi(
        '/doctors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the doctorsIdScheduleGet operation.
     * @callback moduleapi/DefaultApi~doctorsIdScheduleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отримати розклад лікаря за період
     * Повертає розклад прийому лікаря за вказаний період.
     * @param {Number} id Ідентифікатор лікаря
     * @param {Date} from Початкова дата періоду (YYYY-MM-DD)
     * @param {Date} to Кінцева дата періоду (YYYY-MM-DD)
     * @param {module:api/DefaultApi~doctorsIdScheduleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    doctorsIdScheduleGet(id, from, to, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling doctorsIdScheduleGet");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling doctorsIdScheduleGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling doctorsIdScheduleGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'from': from,'to': to
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];

      return this.apiClient.callApi(
        '/doctors/{id}/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the doctorsPost operation.
     * @callback moduleapi/DefaultApi~doctorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Doctor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Додати нового лікаря
     * Додає нового лікаря до системи.
     * @param {module:model/Doctor} body 
     * @param {module:api/DefaultApi~doctorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    doctorsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling doctorsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Doctor;

      return this.apiClient.callApi(
        '/doctors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}