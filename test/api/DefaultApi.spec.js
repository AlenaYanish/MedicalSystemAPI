/*
 * Medical System API
 * API для управління лікарями та записами на прийом у медичній системі.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MedicalSystemApi);
  }
}(this, function(expect, MedicalSystemApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MedicalSystemApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('appointmentsGet', function() {
        it('should call appointmentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for appointmentsGet call and complete the assertions
          /*
          var opts = {};

          instance.appointmentsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MedicalSystemApi.Appointment);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appointmentsIdDelete', function() {
        it('should call appointmentsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for appointmentsIdDelete call
          /*

          instance.appointmentsIdDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appointmentsIdGet', function() {
        it('should call appointmentsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for appointmentsIdGet call and complete the assertions
          /*

          instance.appointmentsIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MedicalSystemApi.Appointment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appointmentsIdPut', function() {
        it('should call appointmentsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for appointmentsIdPut call and complete the assertions
          /*

          instance.appointmentsIdPut(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MedicalSystemApi.Appointment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appointmentsPost', function() {
        it('should call appointmentsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for appointmentsPost call and complete the assertions
          /*

          instance.appointmentsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MedicalSystemApi.Appointment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doctorsGet', function() {
        it('should call doctorsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for doctorsGet call and complete the assertions
          /*
          var opts = {};

          instance.doctorsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MedicalSystemApi.Doctor);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doctorsIdDelete', function() {
        it('should call doctorsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for doctorsIdDelete call
          /*

          instance.doctorsIdDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doctorsIdGet', function() {
        it('should call doctorsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for doctorsIdGet call and complete the assertions
          /*

          instance.doctorsIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MedicalSystemApi.Doctor);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doctorsIdPut', function() {
        it('should call doctorsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for doctorsIdPut call and complete the assertions
          /*

          instance.doctorsIdPut(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MedicalSystemApi.Doctor);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doctorsIdScheduleGet', function() {
        it('should call doctorsIdScheduleGet successfully', function(done) {
          // TODO: uncomment, update parameter values for doctorsIdScheduleGet call and complete the assertions
          /*

          instance.doctorsIdScheduleGet(id, from, to, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MedicalSystemApi.InlineResponse200);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doctorsPost', function() {
        it('should call doctorsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for doctorsPost call and complete the assertions
          /*

          instance.doctorsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MedicalSystemApi.Doctor);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
